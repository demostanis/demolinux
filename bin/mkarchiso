#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later

set -e -u
shopt -s extglob

# Control the environment
umask 0022
export LC_ALL="C.UTF-8"
if [[ -v LANGUAGE ]]; then
    # LC_ALL=C.UTF-8, unlike LC_ALL=C, does not override LANGUAGE.
    # See https://sourceware.org/bugzilla/show_bug.cgi?id=16621 and https://savannah.gnu.org/bugs/?62815
    unset LANGUAGE
fi
[[ -v SOURCE_DATE_EPOCH ]] || printf -v SOURCE_DATE_EPOCH '%(%s)T' -1
export SOURCE_DATE_EPOCH

# Set application name from the script's file name
app_name="${0##*/}"

# Define global variables. All of them will be overwritten later
pkg_list=()
aur_pkg_list=()
nvim_pkg_list=()
zsh_pkg_list=()
local_pkg_list=()
bootstrap_pkg_list=()
data_directories=()
quiet="n"
ssh_access=""
work_dir=""
out_dir=""
iso_version=""
install_dir=""
arch="x86_64"
pacman_conf=""
packages=""
nvim_packages=""
zsh_packages=""
bootstrap_packages=""
pacstrap_dir=""
iso_name=demolinux
buildmodes=()
bootmodes=()
declare -A file_permissions=()
efibootimg=""
efiboot_files=()
# adapted from GRUB_EARLY_INITRD_LINUX_STOCK in https://git.savannah.gnu.org/cgit/grub.git/tree/util/grub-mkconfig.in
readonly ucodes=('intel-uc.img' 'intel-ucode.img' 'amd-uc.img' 'amd-ucode.img' 'early_ucode.cpio' 'microcode.cpio')


# Show an INFO message
# $1: message string
_msg_info() {
    local _msg="${1}"
    [[ "${quiet}" == "y" ]] || printf '[%s] INFO: %s\n' "${app_name}" "${_msg}"
}

# Show a WARNING message
# $1: message string
_msg_warning() {
    local _msg="${1}"
    printf '[%s] WARNING: %s\n' "${app_name}" "${_msg}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    printf '[%s] ERROR: %s\n' "${app_name}" "${_msg}" >&2
    if (( _error > 0 )); then
        exit "${_error}"
    fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
    IFS='' read -r -d '' usagetext <<ENDUSAGETEXT || true
usage: ${app_name} [options] <profile_dir>
  options:
     -C <file>        pacman configuration file.
                      Default: '${pacman_conf}'
     -D <install_dir> Set an install_dir. All files will by located here.
                      Default: '${install_dir}'
                      NOTE: Max 8 characters, use only [a-z0-9]
     -h               This message
     -m [mode ..]     Build mode(s) to use (valid modes are: 'bootstrap', 'iso' and 'netboot').
                      Multiple build modes are provided as quoted, space delimited list.
     -o <out_dir>     Set the output directory
                      Default: '${out_dir}'
     -p [package ..]  Package(s) to install.
                      Multiple packages are provided as quoted, space delimited list.
     -w <work_dir>    Set the working directory
                      Default: '${work_dir}'

  profile_dir:        Directory of the archiso profile to build

Please note that many of these options originate from archiso
and haven't been tested with demolinux.
ENDUSAGETEXT
    printf '%s' "${usagetext}"
    exit "${1}"
}

# Shows configuration options.
_show_config() {
    local build_date
    printf -v build_date '%(%FT%R%z)T' "${SOURCE_DATE_EPOCH}"
    _msg_info "${app_name} configuration settings"
    _msg_info "             Architecture:   ${arch}"
    _msg_info "        Working directory:   ${work_dir}"
    _msg_info "   Installation directory:   ${install_dir}"
    _msg_info "               Build date:   ${build_date}"
    _msg_info "         Output directory:   ${out_dir}"
    _msg_info "       Current build mode:   ${buildmode}"
    _msg_info "                  Profile:   ${profile}"
    _msg_info "Pacman configuration file:   ${pacman_conf}"
    _msg_info "          Image file name:   ${image_name:-None}"
    _msg_info "               Boot modes:   ${bootmodes[*]:-None}"
    _msg_info "            Packages File:   ${buildmode_packages}"
    _msg_info "                 Packages:   ${buildmode_pkg_list[*]}"
    _msg_info "             AUR Packages:   ${aur_pkg_list[*]}"
    _msg_info "            Nvim Packages:   ${nvim_pkg_list[*]}"
    _msg_info "             Zsh Packages:   ${zsh_pkg_list[*]}"
    _msg_info "           Local Packages:   ${local_pkg_list[*]}"
    _msg_info "               SSH access:   ${ssh_access}"
}

# Cleanup airootfs
_cleanup_pacstrap_dir() {
    _msg_info "Cleaning up in pacstrap location..."

    # Delete all files in /boot
    [[ -d "${pacstrap_dir}/boot" ]] && find "${pacstrap_dir}/boot" -mindepth 1 -delete
    # Delete pacman database sync cache files (*.tar.gz)
    [[ -d "${pacstrap_dir}/var/lib/pacman" ]] && find "${pacstrap_dir}/var/lib/pacman" -maxdepth 1 -type f -delete
    # Delete pacman database sync cache
    [[ -d "${pacstrap_dir}/var/lib/pacman/sync" ]] && find "${pacstrap_dir}/var/lib/pacman/sync" -delete
    # Delete pacman package cache
    [[ -d "${pacstrap_dir}/var/cache/pacman/pkg" ]] && find "${pacstrap_dir}/var/cache/pacman/pkg" -type f -delete
    # Delete all log files, keeps empty dirs.
    [[ -d "${pacstrap_dir}/var/log" ]] && find "${pacstrap_dir}/var/log" -type f -delete
    # Delete all temporary files and dirs
    [[ -d "${pacstrap_dir}/var/tmp" ]] && find "${pacstrap_dir}/var/tmp" -mindepth 1 -delete
    # Delete package pacman related files.
    find "${work_dir}" \( -name '*.pacnew' -o -name '*.pacsave' -o -name '*.pacorig' \) -delete
    # Create /etc/machine-id with special value 'uninitialized': the final id is
    # generated on first boot, systemd's first-boot mechanism applies (see machine-id(5))
    rm -f -- "${pacstrap_dir}/etc/machine-id"
    printf 'uninitialized\n' > "${pacstrap_dir}/etc/machine-id"

    _msg_info "Done!"
}

# Helper function to run functions only one time.
# $1: function name
_run_once() {
    if [[ ! -e "${work_dir}/${run_once_mode}.${1}" ]]; then
        "$1"
        touch "${work_dir}/${run_once_mode}.${1}"
    fi
}

# Set up custom pacman.conf with custom cache and pacman hook directories.
_make_pacman_conf() {
    local _cache_dirs _system_cache_dirs _profile_cache_dirs
    _system_cache_dirs="$(pacman-conf CacheDir| tr '\n' ' ')"
    _profile_cache_dirs="$(pacman-conf --config "${pacman_conf}" CacheDir| tr '\n' ' ')"

    # Only use the profile's CacheDir, if it is not the default and not the same as the system cache dir.
    if [[ "${_profile_cache_dirs}" != "/var/cache/pacman/pkg" ]] && \
        [[ "${_system_cache_dirs}" != "${_profile_cache_dirs}" ]]; then
        _cache_dirs="${_profile_cache_dirs}"
    else
        _cache_dirs="${_system_cache_dirs}"
    fi

    _msg_info "Copying custom pacman.conf to work directory..."
    _msg_info "Using pacman CacheDir: ${_cache_dirs}"
    # take the profile pacman.conf and strip all settings that would break in chroot when using pacman -r
    # append CacheDir and HookDir to [options] section
    # HookDir is *always* set to the airootfs' override directory
    # see `man 8 pacman` for further info
    packagesdb="$(realpath -- ${profile}/packages/db)"
    pacman-conf --config "${pacman_conf}" | \
        sed "/CacheDir/d;/DBPath/d;/HookDir/d;/LogFile/d;/RootDir/d;/\[options\]/a CacheDir = ${_cache_dirs}
        s,<packagesdb>,${packagesdb},
        /\[options\]/a HookDir = ${pacstrap_dir}/etc/pacman.d/hooks/" > "${work_dir}/${buildmode}.pacman.conf"
}

# Prepare working directory and copy custom root file system files.
_make_custom_airootfs() {
    local passwd=()
    local filename permissions

    install -d -m 0755 -o 0 -g 0 -- "${pacstrap_dir}"

    if [[ -d "${profile}/airootfs" ]]; then
        _msg_info "Copying custom airootfs files..."
        cp -af --no-preserve=ownership,mode -- "${profile}/airootfs/." "${pacstrap_dir}"
        # Set ownership and mode for files and directories
        for filename in "${!file_permissions[@]}"; do
            IFS=':' read -ra permissions <<< "${file_permissions["${filename}"]}"
            # Prevent file path traversal outside of $pacstrap_dir
            if [[ "$(realpath -q -- "${pacstrap_dir}${filename}")" != "${pacstrap_dir}"* ]]; then
                _msg_error "Failed to set permissions on '${pacstrap_dir}${filename}'. Outside of valid path." 1
            # Warn if the file does not exist
            elif [[ ! -e "${pacstrap_dir}${filename}" ]]; then
                _msg_warning "Cannot change permissions of '${pacstrap_dir}${filename}'. The file or directory does not exist."
            else
                if [[ "${filename: -1}" == "/" ]]; then
                    chown -fhR -- "${permissions[0]}:${permissions[1]}" "${pacstrap_dir}${filename}"
                    chmod -fR -- "${permissions[2]}" "${pacstrap_dir}${filename}"
                else
                    chown -fh -- "${permissions[0]}:${permissions[1]}" "${pacstrap_dir}${filename}"
                    chmod -f -- "${permissions[2]}" "${pacstrap_dir}${filename}"
                fi
            fi
        done
        _msg_info "Done!"
    fi
}

# https://bugs.archlinux.org/task/64265
correct_makechrootpkg=`mktemp`
sed 's/yes y/yes ""/' "$(which makechrootpkg)" > "$correct_makechrootpkg"
chmod +x "$correct_makechrootpkg"
trap 'rm "$correct_makechrootpkg"' EXIT

# Creates and builds packages in a chroot
_make_chroot() {
    chroot_dir="${profile}/packages/chroot" 
    if [ ! -e "${chroot_dir}" ]; then
        mkdir -p "${chroot_dir}"
        _msg_info "Creating build chroot..."
        mkarchroot "${chroot_dir}/root" base-devel
        sed -i 's/ debug / !debug /g' "${chroot_dir}/root/etc/makepkg.conf"
    else
        _msg_info "Updating build chroot..."
        arch-nspawn "${chroot_dir}/root" pacman --noconfirm -Syu
    fi

    buildpkg() {
        pkgdir=$1
        cd "${pkgdir}"
        mypkgver=$(grep pkgver= PKGBUILD)
        mypkgver=${mypkgver##pkgver=}
        mypkgrel=$(grep pkgrel= PKGBUILD)
        mypkgrel=${mypkgrel##pkgrel=}
        pkg="${pkgdir##*/}"
        if ! tar tf "${profile}/packages/db/packages.db.tar.gz" 2>/dev/null | grep "$pkg-$mypkgver-$mypkgrel" >/dev/null 2>&1; then
            chown -R $SUDO_USER:$SUDO_USER "${pkgdir}"

            realpkgname() {
                tar -xOf "$1" .PKGINFO | \
                    awk -F"[= ]" '/pkgname/{print$4}'
            }

            if compgen -G "${profile}"/packages/db/*"$pkg"-*pkg.tar*; then
                file="${profile}"/packages/db/*"$pkg"-*pkg.tar*
                if [ "$(realpkgname "$file")" = "$pkg" ]; then
                    rm "$file"
                fi
            fi

            additional_opts=()
            if compgen -G "${profile}"/packages/db/*pkg.tar* >/dev/null; then
                for file in "${profile}"/packages/db/*pkg.tar*; do
                    if [[ "${additional_opts[@]}" != *"$(realpkgname "$file")"* ]]; then
                        additional_opts+=( -I "$file" )
                    fi
                done
            fi
            "$correct_makechrootpkg" -U $SUDO_USER -r "${chroot_dir}" ${additional_opts[@]}
            repo-add "${profile}"/packages/db/packages.db.tar.gz *pkg.tar*
            mv *pkg.tar* "${profile}"/packages/db/
            _msg_info "Done!"
        fi
        pkg_list+=("$pkg")
    }

    mkdir -p "${profile}"/packages/{aurcache,db}/
    for pkg in ${aur_pkg_list[@]}; do
        _msg_info "Building AUR package $pkg..."
        cachepkgpath="${profile}/packages/aurcache/$pkg"
        if [ -e "$cachepkgpath" ]; then
            cd "$cachepkgpath"
            git pull --quiet
        else
            git clone https://aur.archlinux.org/$pkg.git "$cachepkgpath"
        fi
        buildpkg "$cachepkgpath"
    done
    wait
    for pkg in ${local_pkg_list[@]}; do
        _msg_info "Building package $pkg..."
        buildpkg "${profile}"/packages/tobuild/$pkg
    done

    for pkg in ${nvim_pkg_list[@]}; do
        (
            _msg_info "Cloning nvim package $pkg..."
            pkgname="${pkg##*/}"
            cachepkgpath="${profile}/packages/nvimcache/${pkgname}"
            if [ -e "$cachepkgpath" ]; then
                cd "$cachepkgpath"
                git pull --quiet
            else
                url="$pkg"
                if [[ "$pkg" != https://* ]]; then
                    url=https://github.com/$pkg
                fi
                git clone $url "$cachepkgpath"
            fi
            # damn, thats a long path
            path="${pacstrap_dir}/etc/skel/.local/share/nvim/site/pack/${pkgname}/start/${pkgname}/"
            mkdir -p "$path"
            cp -r "$cachepkgpath"/* "$path"
        ) &
    done
    wait

    for pkg in ${zsh_pkg_list[@]}; do
        (
            _msg_info "Cloning zsh package $pkg..."
            pkgname="${pkg##*/}"
            cachepkgpath="${profile}/packages/zshcache/${pkgname}"
            if [ -e "$cachepkgpath" ]; then
                cd "$cachepkgpath"
                git pull --quiet
            else
                url="$pkg"
                if [[ "$pkg" != https://* ]]; then
                    url=https://github.com/$pkg
                fi
                git clone $url "$cachepkgpath"
            fi
            mkdir -p "${pacstrap_dir}/etc/skel/.zplugins/${pkgname}"
            cp -r "$cachepkgpath"/{.[!.]*,*} "${pacstrap_dir}/etc/skel/.zplugins/${pkgname}"
        ) &
    done
    wait
}

# Install desired packages to the root file system
_make_packages() {
    _msg_info "Installing packages to '${pacstrap_dir}/'..."

    # Unset TMPDIR to work around https://bugs.archlinux.org/task/70580
    if [[ "${quiet}" = "y" ]]; then
        env -u TMPDIR pacstrap -C "${work_dir}/${buildmode}.pacman.conf" -c -G -M -- "${pacstrap_dir}" "${buildmode_pkg_list[@]}" &> /dev/null
    else
        env -u TMPDIR pacstrap -C "${work_dir}/${buildmode}.pacman.conf" -c -G -M -- "${pacstrap_dir}" "${buildmode_pkg_list[@]}"
    fi

    _msg_info "Done! Packages installed successfully."
}

# Customize installation.
_make_customize_airootfs() {
    local passwd=()
    local fprofile_dir

    # Arch Linux archive so we don't have to -y all the time
    echo Server = https://archive.archlinux.org/repos/$(date -d yesterday -u +%Y/%m/%d)/'$repo'/os/'$arch' >> "${pacstrap_dir}/etc/pacman.d/mirrorlist"

    # Generate locales
    eval -- env -u TMPDIR arch-chroot "${pacstrap_dir}" "/usr/bin/locale-gen"

    eval -- env -u TMPDIR HOME=/tmp arch-chroot "${pacstrap_dir}" 'bash -c '"'"'for doc in $(find /etc/skel/.local/share/nvim/site/pack -type d -name doc); do nvim -u NONE +"helptags $doc|q"; done'"'" >/dev/null

    # oomox is so messy that it was cleaner to separate
    # it to another file
    _msg_info "Generating oomox theme..."
    chmod +x "${pacstrap_dir}/usr/share/oomox/run_oomox.sh"
    eval -- env -u TMPDIR arch-chroot "${pacstrap_dir}" "/usr/share/oomox/run_oomox.sh"

    # Copy SSH public key
    if [[ "$ssh_access" = y* ]] && [ -e ~/.ssh/id_ed25519.pub ]; then
        _msg_info "Adding your id_ed25519.pub to ~/.ssh/authorized_keys..."
        mkdir -p "${pacstrap_dir}/etc/skel/.ssh/"
        cat ~/.ssh/id_ed25519.pub >> "${pacstrap_dir}/etc/skel/.ssh/authorized_keys"
        _msg_info "Enabling sshd.service..."
        ln -sf /usr/lib/systemd/system/sshd.service "${pacstrap_dir}/etc/systemd/system/multi-user.target.wants/sshd.service"
        _msg_info "Done!"
    else
        # do not allow connections to port 22
        sed -i /22/d "${pacstrap_dir}"/etc/ufw/*.rules
    fi

    _msg_info "Copying source to /usr/src/demolinux..."
    git clone "${profile}" "${pacstrap_dir}"/usr/src/demolinux >/dev/null

    # Install userchromejs-specific files to the Firefox profile
    if [[ " ${pkg_list[@]} " =~ " firefox-userchromejs " ]]; then
        _msg_info "Copying userchromejs configuration..."
        fprofile_dir="${pacstrap_dir}/etc/skel/.mozilla/firefox/default.profile"
        mkdir -p "${fprofile_dir}"
        cp -r "${pacstrap_dir}/usr/share/firefox-userchromejs/base/chrome/" "${fprofile_dir}"
        _msg_info "Done!"
    fi

    for dir in ${data_directories[@]}; do
        ln -snf "/data/$dir" "${pacstrap_dir}/etc/skel/$dir"
    done

    if [[ -e "${profile}/airootfs/etc/passwd" ]]; then
        _msg_info "Copying /etc/skel/* to user homes..."
        while IFS=':' read -a passwd -r; do
            # Only operate on UIDs in range 1000–59999
            (( passwd[2] >= 1000 && passwd[2] < 60000 )) || continue
            # Skip invalid home directories
            [[ "${passwd[5]}" == '/' ]] && continue
            [[ "${passwd[5]}" == '/root' ]] && continue
            [[ -z "${passwd[5]}" ]] && continue
            # Prevent path traversal outside of $pacstrap_dir
            if [[ "$(realpath -q -- "${pacstrap_dir}${passwd[5]}")" == "${pacstrap_dir}"* ]]; then
                if [[ ! -d "${pacstrap_dir}${passwd[5]}" ]]; then
                    install -d -m 0750 -o "${passwd[2]}" -g "${passwd[3]}" -- "${pacstrap_dir}${passwd[5]}"
                fi
                cp -dnRT --preserve=mode,timestamps,links -- "${pacstrap_dir}/etc/skel/." "${pacstrap_dir}${passwd[5]}"
                chmod -f 0750 -- "${pacstrap_dir}${passwd[5]}"
                chown -hR -- "${passwd[2]}:${passwd[3]}" "${pacstrap_dir}${passwd[5]}"
            else
                _msg_error "Failed to set permissions on '${pacstrap_dir}${passwd[5]}'. Outside of valid path." 1
            fi
        done < "${profile}/airootfs/etc/passwd"
        _msg_info "Done!"
    fi
}

# Set up boot loaders
_make_bootmodes() {
    local bootmode
    for bootmode in "${bootmodes[@]}"; do
        _run_once "_make_bootmode_${bootmode}"
    done
}

_move_boot_to_temp_location() {
    local ucode_image
    mkdir -p "$work_dir"/boot
    mv -- "${pacstrap_dir}/boot/initramfs-"*".img" "$work_dir"/boot
    mv -- "${pacstrap_dir}/boot/vmlinuz-"* "$work_dir"/boot

    for ucode_image in "${ucodes[@]}"; do
        if [[ -e "${pacstrap_dir}/boot/${ucode_image}" ]]; then
            mv -- "${pacstrap_dir}/boot/${ucode_image}" "$work_dir"/boot
        fi
    done
}

_validate_common_requirements_buildmode_all() {
    local bootmode
    local pkg_list_from_file=()

    # Check if the package list file exists and read packages from it
    if [[ -e "${packages}" ]]; then
        mapfile -t pkg_list_from_file < <(_parse_file "${packages}")
        for pkg in "${pkg_list_from_file[@]}"; do
            if [[ "$pkg" = aur\ * ]]; then
                aur_pkg_list+=("${pkg##aur }")
            elif [[ "$pkg" = local\ * ]]; then
                local_pkg_list+=("${pkg##local }")
            else
                pkg_list+=("$pkg")
            fi
        done
        if (( ${#pkg_list_from_file[@]} < 1 )); then
            (( validation_error=validation_error+1 ))
            _msg_error "no package specified in '${packages}'." 0
        fi
    else
        (( validation_error=validation_error+1 ))
        _msg_error "packages file '${packages}' does not exist." 0
    fi

    if [[ -e "${nvim_packages}" ]]; then
        mapfile -t nvim_pkg_list < <(_parse_file "${nvim_packages}")
        if (( ${#nvim_pkg_list[@]} < 1 )); then
            (( validation_error=validation_error+1 ))
            _msg_error "no package specified in '${nvim_packages}'." 0
        fi
    fi
    if [[ -e "${zsh_packages}" ]]; then
        mapfile -t zsh_pkg_list < <(_parse_file "${zsh_packages}")
        if (( ${#zsh_pkg_list[@]} < 1 )); then
            (( validation_error=validation_error+1 ))
            _msg_error "no package specified in '${zsh_packages}'." 0
        fi
    fi
}

copy_boot_files() {
    local ucode_image
    _msg_info "Preparing kernel and initramfs for the disk image..."

    # Way too many MBs wasted...
    rm -f "${work_dir}/boot/"*"fallback"*".img"
    cp -- "${work_dir}/boot/initramfs-"*".img" /mnt/demolinux/boot
    cp -- "${work_dir}/boot/vmlinuz-"* /mnt/demolinux/boot

    if [ -e /usr/share/ipxe/ipxe.lkrn ]; then
        cp /usr/share/ipxe/ipxe.lkrn /mnt/demolinux/boot
    fi
    if [ -e /usr/share/ipxe/x86_64/ipxe.efi ]; then
        cp /usr/share/ipxe/x86_64/ipxe.efi /mnt/demolinux/boot
    fi
    if [ -e /boot/memtest86+/memtest.bin ]; then
        cp /boot/memtest86+/memtest.bin /mnt/demolinux/boot
    fi
    if [ -e /boot/memtest86+/memtest.efi ]; then
        cp /boot/memtest86+/memtest.efi /mnt/demolinux/boot
    fi

    for ucode_image in "${ucodes[@]}"; do
        if [[ -e "${work_dir}/boot/${ucode_image}" ]]; then
            cp -- "${work_dir}/boot/${ucode_image}" /mnt/demolinux/boot/
        fi
    done
    _msg_info "Done!"
}

_parse_file() {
    sed '/^[[:blank:]]*#.*/d;s/[[:blank:]]\?#.*//;/^[[:blank:]]*$/d' "$1"
}

_validate_requirements_bootmode_hybrid.grub.gpt() {
    if [[ ! " ${pkg_list[*]} " =~ ' grub ' ]]; then
        (( validation_error=validation_error+1 ))
        _msg_error "Validating '${bootmode}': The 'grub' package is missing from the package list!" 0
    fi
}

# Allow booting from both BIOS and UEFI
_make_bootmode_hybrid.grub.gpt() {
    # we used to calculate manually the size of the system partition.
    # since we now use Btrfs with zstd compression, instead of calculating
    # an incorrect size (since the size will greatly shrink after being
    # copied to the Btrfs subvolume), we set a fixed size. this also
    # ensures the system won't take up an extravagant amount of
    # space in the future.
    system_size=$( numfmt --from=iec --to=none --to-unit=1000000 <<< 4G)M
    disk_size=$( echo $(( "$(numfmt --from=iec --field=1,3,5 <<< "$system_size + 1M + 200M")" )) | numfmt --to=none --to-unit=1000000 --format=%.0f )M
    imgpath="${work_dir}/disk.img"

    _msg_info "Partitioning disk..."
    # Create the disk image partitions
    truncate -s $disk_size "$imgpath"
    sgdisk \
        -n 1:0:+1M -t 1:ef02 -c 1:legacyboot \
        -n 2:0:+200M -t 2:ef00 -c 2:boot \
        -n 3:0:+$system_size -t 3:8300 -c 3:system \
        -p "$imgpath"

    losetup -P /dev/loop0 "$imgpath"

    _msg_info "Creating file systems..."
    # boot
    mkfs.vfat /dev/loop0p2
    # system, swap, persist, data
    mkfs.btrfs /dev/loop0p3

    mkdir -p /mnt/demolinux/root
    mount -o compress=zstd,noatime /dev/loop0p3 /mnt/demolinux/root
    btrfs subvolume create /mnt/demolinux/root/system
    btrfs subvolume create /mnt/demolinux/root/system/airootfs
    _msg_info "Copying files to the disk image..."
    cp -a "${pacstrap_dir}"/* /mnt/demolinux/root/system/airootfs
    cp -r "${profile}/packages/db" /mnt/demolinux/root/system/airootfs/packages
    btrfs property set /mnt/demolinux/root/system/airootfs ro true

    mkdir -p /mnt/demolinux/boot
    mount /dev/loop0p2 /mnt/demolinux/boot
    copy_boot_files

    _msg_info "Installing grub..."
    # Install grub for both BIOS and UEFI boot
    grub-install --target=i386-pc /dev/loop0 \
        --boot-directory=/mnt/demolinux/boot \
        --removable
    grub-install --target=x86_64-efi --no-nvram \
        --boot-directory=/mnt/demolinux/boot \
        --efi-directory=/mnt/demolinux/boot \
        --bootloader-id demolinux --removable

    _msg_info "Configuring grub..."
    cp "$profile"/grub/splash.png /mnt/demolinux/boot/grub
    # Patch grub-mkconfig to look at the right devices
    # and configuration files
    grub_cfg=/mnt/demolinux/boot/grub/grub.cfg
    sed '
        1a set -- -o '$grub_cfg'
        s,GRUB_DEVICE=.*,GRUB_DEVICE=/dev/loop0p3,
        s,GRUB_DEVICE_BOOT=.*,GRUB_DEVICE_BOOT=/dev/loop0p2,
        s,grub_mkconfig_dir=.*,grub_mkconfig_dir='"$profile"'/grub/grub.d,
        /\/default\/grub ; then/{N;N;N;N;N;N;N;a . '"$profile"'/grub/config
    d}' `which grub-mkconfig` | bash -

    mkdir -p /mnt/demolinux/boot/boot/grub
    cat > /mnt/demolinux/boot/boot/grub/grub.cfg <<-EOF
    # fix an issue where ubuntu's grub tries to load \$prefix/boot/grub.cfg instead of \$prefix/grub.cfg on some firmware
    set prefix="(\$root)"/grub
    configfile "\$prefix"/grub.cfg
EOF

    umount /mnt/demolinux/{b,r}oot
    losetup -d /dev/loop0

    _msg_info "Done!"
}

_validate_requirements_bootmode_bios.syslinux.mbr() {
    # bios.syslinux.mbr requires bios.syslinux.eltorito
    # shellcheck disable=SC2076
    if [[ ! " ${bootmodes[*]} " =~ ' bios.syslinux.eltorito ' ]]; then
        (( validation_error=validation_error+1 ))
        _msg_error "Using 'bios.syslinux.mbr' boot mode without 'bios.syslinux.eltorito' is not supported." 0
    fi

    # Check if the syslinux package is in the package list
    # shellcheck disable=SC2076
    if [[ ! " ${pkg_list[*]} " =~ ' syslinux ' ]]; then
        (( validation_error=validation_error+1 ))
        _msg_error "Validating '${bootmode}': The 'syslinux' package is missing from the package list!" 0
    fi

    # Check if syslinux configuration files exist
    if [[ ! -d "${profile}/syslinux" ]]; then
        (( validation_error=validation_error+1 ))
        _msg_error "Validating '${bootmode}': The '${profile}/syslinux' directory is missing!" 0
    else
        local cfgfile
        for cfgfile in "${profile}/syslinux/"*'.cfg'; do
            if [[ -e "${cfgfile}" ]]; then
                break
            else
                (( validation_error=validation_error+1 ))
                _msg_error "Validating '${bootmode}': No configuration file found in '${profile}/syslinux/'!" 0
            fi
        done
    fi

    # Check for optional packages
    # shellcheck disable=SC2076
    if [[ ! " ${pkg_list[*]} " =~ ' memtest86+ ' ]]; then
        _msg_info "Validating '${bootmode}': 'memtest86+' is not in the package list. Memmory testing will not be available from syslinux."
    fi
}

# Read profile's values from profiledef.sh
_read_profile() {
    if [[ -z "${profile}" ]]; then
        _msg_error "No profile specified!" 1
    fi
    if [[ ! -d "${profile}" ]]; then
        _msg_error "Profile '${profile}' does not exist!" 1
    elif [[ ! -e "${profile}/profiledef.sh" ]]; then
        _msg_error "Profile '${profile}' is missing 'profiledef.sh'!" 1
    else
        cd -- "${profile}"

        # Source profile's variables
        # shellcheck source=configs/releng/profiledef.sh
        . "${profile}/profiledef.sh"

        # Resolve paths of files that are expected to reside in the profile's directory
        [[ -n "$arch" ]] || arch="$(uname -m)"
        [[ -n "$packages" ]] || packages="${profile}/available_packages"
        [[ -n "$nvim_packages" ]] || nvim_packages="${profile}/nvim_packages"
        [[ -n "$zsh_packages" ]] || zsh_packages="${profile}/zsh_plugins"
        packages="$(realpath -- "${packages}")"
        nvim_packages="$(realpath -- "${nvim_packages}")"
        zsh_packages="$(realpath -- "${zsh_packages}")"
        pacman_conf="$(realpath -- "${pacman_conf}")"

        # Resolve paths of files that may reside in the profile's directory
        if [[ -z "$bootstrap_packages" ]] && [[ -e "${profile}/bootstrap_packages.${arch}" ]]; then
            bootstrap_packages="${profile}/bootstrap_packages.${arch}"
            bootstrap_packages="$(realpath -- "${bootstrap_packages}")"
            pacman_conf="$(realpath -- "${pacman_conf}")"
        fi

        cd -- "${OLDPWD}"
    fi
}

# Validate set options
_validate_options() {
    local validation_error=0 _buildmode certfile

    _msg_info "Validating options..."

    # Check if pacman configuration file exists
    if [[ ! -e "${pacman_conf}" ]]; then
        (( validation_error=validation_error+1 ))
        _msg_error "File '${pacman_conf}' does not exist." 0
    fi

    # Check if the specified buildmodes are supported
    for _buildmode in "${buildmodes[@]}"; do
        if typeset -f "_build_buildmode_${_buildmode}" &> /dev/null; then
            if typeset -f "_validate_requirements_buildmode_${_buildmode}" &> /dev/null; then
                "_validate_requirements_buildmode_${_buildmode}"
            else
                _msg_warning "Function '_validate_requirements_buildmode_${_buildmode}' does not exist. Validating the requirements of '${_buildmode}' build mode will not be possible."
            fi
        else
            (( validation_error=validation_error+1 ))
            _msg_error "${_buildmode} is not a valid build mode!" 0
        fi
    done

    if (( validation_error )); then
        _msg_error "${validation_error} errors were encountered while validating the profile. Aborting." 1
    fi
    _msg_info "Done!"
}

# Set defaults and, if present, overrides from mkarchiso command line option parameters
_set_overrides() {
    # Set variables that have command line overrides
    [[ ! -v override_buildmodes ]] || buildmodes=("${override_buildmodes[@]}")
    if (( ${#buildmodes[@]} < 1 )); then
        buildmodes+=('iso')
    fi
    if [[ -v override_work_dir ]]; then
        work_dir="$override_work_dir"
    elif [[ -z "$work_dir" ]]; then
        work_dir='./work'
    fi
    work_dir="$(realpath -- "$work_dir")"
    if [[ -v override_out_dir ]]; then
        out_dir="$override_out_dir"
    elif [[ -z "$out_dir" ]]; then
        out_dir='./out'
    fi
    out_dir="$(realpath -- "$out_dir")"
    if [[ -v override_pacman_conf ]]; then
        pacman_conf="$override_pacman_conf"
    elif [[ -z "$pacman_conf" ]]; then
        pacman_conf="/etc/pacman.conf"
    fi
    pacman_conf="$(realpath -- "$pacman_conf")"
    [[ ! -v override_pkg_list ]] || pkg_list+=("${override_pkg_list[@]}")
    # TODO: allow overriding bootstrap_pkg_list
    if [[ -v override_install_dir ]]; then
        install_dir="$override_install_dir"
    elif [[ -z "$install_dir" ]]; then
        install_dir="${app_name}"
    fi
}

_make_version() {
    local _os_release

    _msg_info "Creating version files..."
    # Write version file to system installation dir
    rm -f -- "${pacstrap_dir}/version"
    printf '%s\n' "${iso_version}" > "${pacstrap_dir}/version"

    if [[ "${buildmode}" == @("iso"|"netboot") ]]; then
        install -d -m 0755 -- "${isofs_dir}/${install_dir}"
        # Write version file to ISO 9660
        printf '%s\n' "${iso_version}" > "${isofs_dir}/${install_dir}/version"

    fi

    # Append IMAGE_ID & IMAGE_VERSION to os-release
    _os_release="$(realpath -- "${pacstrap_dir}/etc/os-release")"
    if [[ ! -e "${pacstrap_dir}/etc/os-release" && -e "${pacstrap_dir}/usr/lib/os-release" ]]; then
        _os_release="$(realpath -- "${pacstrap_dir}/usr/lib/os-release")"
    fi
    if [[ "${_os_release}" != "${pacstrap_dir}"* ]]; then
        _msg_warning "os-release file '${_os_release}' is outside of valid path."
    else
        [[ ! -e "${_os_release}" ]] || sed -i '/^IMAGE_ID=/d;/^IMAGE_VERSION=/d' "${_os_release}"
        printf 'IMAGE_ID=%s\nIMAGE_VERSION=%s\n' "${iso_name}" "${iso_version}" >> "${_os_release}"
    fi

    # Touch /usr/lib/clock-epoch to give another hint on date and time
    # for systems with screwed or broken RTC.
    touch -m -d"@${SOURCE_DATE_EPOCH}" -- "${pacstrap_dir}/usr/lib/clock-epoch"

    _msg_info "Done!"
}

_make_pkglist() {
    _msg_info "Creating a list of installed packages on live-enviroment..."
    case "${buildmode}" in
        "bootstrap")
            pacman -Q --sysroot "${pacstrap_dir}" > "${pacstrap_dir}/pkglist.${arch}.txt"
            ;;
        "iso"|"netboot")
            install -d -m 0755 -- "${isofs_dir}/${install_dir}"
            pacman -Q --sysroot "${pacstrap_dir}" > "${isofs_dir}/${install_dir}/pkglist.${arch}.txt"
            ;;
    esac
    _msg_info "Done!"
}

# build the base for an ISO and/or a netboot target
_build_iso_base() {
    local run_once_mode="base"
    local buildmode_packages="${packages}"
    # Set the package list to use
    local buildmode_pkg_list=("${pkg_list[@]}")
    # Set up essential directory paths
    pacstrap_dir="${work_dir}/${arch}/airootfs"
    isofs_dir="${work_dir}/iso"

    # Create working directory
    [[ -d "${work_dir}" ]] || install -d -- "${work_dir}"
    # Write build date to file or if the file exists, read it from there
    if [[ -e "${work_dir}/build_date" ]]; then
        SOURCE_DATE_EPOCH="$(<"${work_dir}/build_date")"
    else
        printf '%s\n' "$SOURCE_DATE_EPOCH" > "${work_dir}/build_date"
    fi

    [[ "${quiet}" == "y" ]] || _show_config
    _run_once _make_pacman_conf
    _run_once _make_custom_airootfs
    _run_once _make_chroot
    # Building packages might update $pkg_list
    buildmode_pkg_list=("${pkg_list[@]}")
    _run_once _make_packages
    _run_once _make_version
    _run_once _make_customize_airootfs
    _run_once _make_pkglist
    if [[ "${buildmode}" == 'netboot' ]]; then
        _run_once _make_boot_on_iso9660
    else
        _make_bootmodes
    fi
    _run_once _cleanup_pacstrap_dir
    _run_once _prepare_airootfs_image
}

_build_disk_image_base() {
    local run_once_mode="base"
    local buildmode_packages="${packages}"
    # Set the package list to use
    local buildmode_pkg_list=("${pkg_list[@]}")
    # Set up essential directory paths
    pacstrap_dir="${work_dir}/${arch}/airootfs"
    isofs_dir="${work_dir}/iso"

    # Create working directory
    [[ -d "${work_dir}" ]] || install -d -- "${work_dir}"
    # Write build date to file or if the file exists, read it from there
    if [[ -e "${work_dir}/build_date" ]]; then
        SOURCE_DATE_EPOCH="$(<"${work_dir}/build_date")"
    else
        printf '%s\n' "$SOURCE_DATE_EPOCH" > "${work_dir}/build_date"
    fi

    [[ "${quiet}" == "y" ]] || _show_config
    _run_once _make_pacman_conf
    _run_once _make_custom_airootfs
    _run_once _make_chroot
    # Building packages might update $pkg_list
    buildmode_pkg_list=("${pkg_list[@]}")
    _run_once _make_packages
    _run_once _make_version
    _run_once _make_customize_airootfs
    _run_once _make_pkglist
    _run_once _move_boot_to_temp_location
    #_run_once _prepare_airootfs_image
    _make_bootmodes
    _run_once _cleanup_pacstrap_dir
}


_finalize_disk_image() {
    _msg_info "Moving disk image to ${out_dir}/$image_name..."
    local image_name="${iso_name}-${iso_version}-${arch}.img"
    mkdir -p "${out_dir}"
    mv "${work_dir}/disk.img" "${out_dir}/$image_name"
    local user=${SUDO_USER:-1000}
    chown $user:$user "${out_dir}/$image_name"
    _msg_info "Done!"
}

_build_buildmode_disk_image() {
    local image_name="${iso_name}-${iso_version}-${arch}.img"
    local run_once_mode="${buildmode}"
    _build_disk_image_base
    _finalize_disk_image
}

_validate_requirements_buildmode_disk_image() {
    _validate_common_requirements_buildmode_all

    # Check if the specified bootmodes are supported
    if (( ${#bootmodes[@]} < 1 )); then
        (( validation_error=validation_error+1 ))
        _msg_error "No boot modes specified in '${profile}/profiledef.sh'." 0
    fi
    for bootmode in "${bootmodes[@]}"; do
        if typeset -f "_make_bootmode_${bootmode}" &> /dev/null; then
            if typeset -f "_validate_requirements_bootmode_${bootmode}" &> /dev/null; then
                "_validate_requirements_bootmode_${bootmode}"
            else
                _msg_warning "Function '_validate_requirements_bootmode_${bootmode}' does not exist. Validating the requirements of '${bootmode}' boot mode will not be possible."
            fi
        else
            (( validation_error=validation_error+1 ))
            _msg_error "${bootmode} is not a valid boot mode!" 0
        fi
    done

    if ! command -v awk &> /dev/null; then
        (( validation_error=validation_error+1 ))
        _msg_error "Validating build mode '${_buildmode}': awk is not available on this host. Install 'awk'!" 0
    fi
}

# build all buildmodes
_build() {
    local buildmode
    local run_once_mode="build"

    for buildmode in "${buildmodes[@]}"; do
        _run_once "_build_buildmode_${buildmode}"
    done
}

while getopts 'c:p:C:L:P:A:D:d:s:w:m:o:g:G:vh?' arg; do
    case "${arg}" in
        p) read -r -a override_pkg_list <<< "${OPTARG}" ;;
        C) override_pacman_conf="${OPTARG}" ;;
        D) override_install_dir="${OPTARG}" ;;
        w) override_work_dir="${OPTARG}" ;;
        m) read -r -a override_buildmodes <<< "${OPTARG}" ;;
        o) override_out_dir="${OPTARG}" ;;
        h|?) _usage 0 ;;
        *)
            _msg_error "Invalid argument '${arg}'" 0
            _usage 1
            ;;
    esac
done

shift $((OPTIND - 1))

if (( $# < 1 )); then
    _msg_error "No profile specified" 0
    _usage 1
fi

if (( EUID != 0 )); then
    _msg_error "${app_name} must be run as root." 1
fi

# get the absolute path representation of the first non-option argument
profile="$(realpath -- "${1}")"

_read_profile
_set_overrides
_validate_options
_build

# vim:ts=4:sw=4:et:
