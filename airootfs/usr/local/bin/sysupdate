#!/bin/sh

set -e

if [ $(id -u) != 0 ]; then
	echo "This program needs to run as root" >&2
	exit 1
fi

cd /data
if [ -e ./sysupdate ]; then
	echo warning: /data/sysupdate already exists
fi
mkdir -p sysupdate
cd sysupdate

nightly=no
fetch=yes
for arg in $@; do
	if [ "$arg" = --nightly ]; then
		nightly=yes
	elif [ "$arg" = --no-fetch ]; then
		fetch=no
	fi
done

REPO=demostanis/demolinux
RELEASE=latest
if [ $nightly = yes ]; then
	RELEASE=tags/nightly
fi

if [ $fetch = yes ]; then
	files=$(curl -s https://api.github.com/repos/$REPO/releases/$RELEASE | \
		jq -r '.assets[].browser_download_url')

	echo downloading update...
	curl -C- -L --remote-name-all -Z $files

	echo creating demolinux.img...
	cat demolinux-a* > demolinux.img

	echo checking file integrity...
	sed -Ei 's/out\/demolinux-.*\.img/demolinux.img/' sha256sums.txt
	sha256sum -c sha256sums.txt
else
	if [ ! -e demolinux.img ]; then
		echo /data/sysupdate/demolinux.img not found. >&2
		echo you need to generate demolinux.img yourself >&2
		echo when using --no-fetch. >&2
		exit 1
	fi
fi

attr -qs createdbysysupdate -V yes demolinux.img

echo installing new kernel...
mkdir -p ../.boot.bak
cp /run/archiso/bootmnt/vmlinuz-linux ../.boot.bak
cp /run/archiso/bootmnt/initramfs-linux.img ../.boot.bak
mkdir -p /run/archiso/newbootmnt
dev=$(losetup --show -Pf demolinux.img)
mount "$dev"p2 /run/archiso/newbootmnt
mount -o remount,rw /run/archiso/bootmnt
cp -a /run/archiso/newbootmnt/{vmlinuz-linux,initramfs-linux.img,amd-ucode.img,intel-ucode.img} /run/archiso/bootmnt
umount /run/archiso/newbootmnt
rm -r /run/archiso/newbootmnt

echo rebooting...
kexec -l /run/archiso/bootmnt/vmlinuz-linux --initrd=/run/archiso/bootmnt/initramfs-linux.img --command-line="$(sed -E 's/btrfs_snapshot=([^ ]|$)+ ?//' /proc/cmdline)"
kexec -e
