#!/bin/sh
set -e

# copy pasted from 10_linux

prefix="/usr"
exec_prefix="/usr"
datarootdir="/usr/share"

. "$pkgdatadir/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

CLASS="--class gnu-linux --class gnu --class os"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS=Linux
else
  OS="${GRUB_DISTRIBUTOR}"
  CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1|LC_ALL=C sed 's,[^[:alnum:]_],_,g') ${CLASS}"
fi

linux_entry ()
{
  os="$1"
  version="$2"
  type="$3"
  args="$4"

  if [ -z "$boot_device_id" ]; then
      boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
  fi
  type=simple
  if [ x$type != xsimple ] ; then
      case $type in
	  booster)
	      title="$(gettext_printf "%s, with Linux %s (booster initramfs)" "${os}" "${version}")" ;;
	  fallback)
	      title="$(gettext_printf "%s, with Linux %s (fallback initramfs)" "${os}" "${version}")" ;;
	  recovery)
	      title="$(gettext_printf "%s, with Linux %s (recovery mode)" "${os}" "${version}")" ;;
	  *)
	      title="$(gettext_printf "%s, with Linux %s" "${os}" "${version}")" ;;
      esac
      if [ x"$title" = x"$GRUB_ACTUAL_DEFAULT" ] || [ x"Previous Linux versions>$title" = x"$GRUB_ACTUAL_DEFAULT" ]; then
	  replacement_title="$(echo "Advanced options for ${OS}" | sed 's,>,>>,g')>$(echo "$title" | sed 's,>,>>,g')"
	  quoted="$(echo "$GRUB_ACTUAL_DEFAULT" | grub_quote)"
	  title_correction_code="${title_correction_code}if [ \"x\$default\" = '$quoted' ]; then default='$(echo "$replacement_title" | grub_quote)'; fi;"
	  grub_warn "$(gettext_printf "Please don't use old title \`%s' for GRUB_DEFAULT, use \`%s' (for versions before 2.00) or \`%s' (for 2.00 or later)" "$GRUB_ACTUAL_DEFAULT" "$replacement_title" "gnulinux-advanced-$boot_device_id>gnulinux-$version-$type-$boot_device_id")"
      fi
      echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  else
      echo 'insmod regexp'
      echo 'regexp --set name "[^/]*/snapshot-(.+)" "$snapshot"'
      echo "menuentry '$(echo "Boot $os" | grub_quote)'\ \"(\$name)\" ${CLASS} \$menuentry_id_option 'gnulinux-simple-$boot_device_id' \"\$snapshot\" {" | sed "s/^/$submenu_indentation/"
  fi      
  if [ x$type != xrecovery ] ; then
      save_default_entry | grub_add_tab
  fi

  # Use ELILO's generic "efifb" when it's known to be available.
  # FIXME: We need an interface to select vesafb in case efifb can't be used.
  if [ "x$GRUB_GFXPAYLOAD_LINUX" = x ]; then
      echo "	load_video" | sed "s/^/$submenu_indentation/"
      if grep -qx "CONFIG_FB_EFI=y" "${config}" 2> /dev/null \
	  && grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" "${config}" 2> /dev/null; then
	  echo "	set gfxpayload=keep" | sed "s/^/$submenu_indentation/"
      fi
  else
      if [ "x$GRUB_GFXPAYLOAD_LINUX" != xtext ]; then
	  echo "	load_video" | sed "s/^/$submenu_indentation/"
      fi
      echo "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX" | sed "s/^/$submenu_indentation/"
  fi

  echo "	insmod gzio" | sed "s/^/$submenu_indentation/"

  if [ x$dirname = x/ ]; then
    if [ -z "${prepare_root_cache}" ]; then
      prepare_root_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE} | grub_add_tab)"
    fi
    printf '%s\n' "${prepare_root_cache}" | sed "s/^/$submenu_indentation/"
  else
    if [ -z "${prepare_boot_cache}" ]; then
      prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | grub_add_tab)"
    fi
    printf '%s\n' "${prepare_boot_cache}" | sed "s/^/$submenu_indentation/"
  fi
  message="$(gettext_printf "Loading kernel %s..." ${version})"
  sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$message" | grub_quote)'
	linux	${rel_dirname}/${basename} ${args}
EOF
  if test -n "${initrd}" ; then
    # TRANSLATORS: ramdisk isn't identifier. Should be translated.
    message="$(gettext_printf "Loading initial ramdisk...")"
    initrd_path=
    for i in ${initrd}; do
      initrd_path="${initrd_path} ${rel_dirname}/${i}"
    done
    sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$message" | grub_quote)'
	initrd	$(echo $initrd_path)
EOF
  fi
  sed "s/^/$submenu_indentation/" << EOF
}
EOF
}

linux="/mnt/demolinux/boot/vmlinuz-linux"
basename=`basename $linux`
dirname=`dirname $linux`
rel_dirname=`make_system_path_relative_to_its_root $dirname`
version=`echo $basename | sed -e "s,vmlinuz-,,g"`
alt_version=`echo $version | sed -e "s,\.old$,,g"`
linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

initrd_early=
for i in ${GRUB_EARLY_INITRD_LINUX_STOCK} \
         ${GRUB_EARLY_INITRD_LINUX_CUSTOM}; do
  if test -e "${dirname}/${i}" ; then
    initrd_early="${initrd_early} ${i}"
  fi
done

 # also hardcoding this lol
initrd_real=initramfs-linux.img

initrd=
if test -n "${initrd_early}" || test -n "${initrd_real}"; then
  initrd="${initrd_early} ${initrd_real}"

  initrd_display=
  for i in ${initrd}; do
    initrd_display="${initrd_display} ${dirname}/${i}"
  done
  gettext_printf "Found initrd image: %s\n" "$(echo $initrd_display)" >&2
fi
  config=
for i in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
  if test -e "${i}" ; then
    config="${i}"
    break
  fi
done

initramfs=
if test -n "${config}" ; then
    initramfs=`grep CONFIG_INITRAMFS_SOURCE= "${config}" | cut -f2 -d= | tr -d \"`
fi

if test -z "${initramfs}" && test -z "${initrd_real}" ; then
  # "UUID=" and "ZFS=" magic is parsed by initrd or initramfs.  Since there's
  # no initrd or builtin initramfs, it can't work here.
  if [ "x${GRUB_DEVICE_PARTUUID}" = "x" ] \
      || [ "x${GRUB_DISABLE_LINUX_PARTUUID}" = "xtrue" ]; then

      linux_root_device_thisversion=${GRUB_DEVICE}
  else
      linux_root_device_thisversion=PARTUUID=${GRUB_DEVICE_PARTUUID}
  fi
fi

# end of copy pasted garbage



uuid=$(blkid $(findmnt /mnt/demolinux/root -o SOURCE | tail -1) -s UUID -o value)
echo '
insmod regexp
search --no-floppy --fs-uuid --set=btrfs_root '$uuid'

has_snapshots=0
# seems like the only way know if a directory is empty...
for snapshot in ($btrfs_root)/system/snapshots/*; do
    if [ "$snapshot" != "($btrfs_root)/system/snapshots/*" ]; then
	has_snapshots=1
    fi
done

if [ "$has_snapshots" = 1 ]; then
	export btrfs_root
	submenu "Boot to previous snapshot..." {
		insmod regexp
		for snapshot in ($btrfs_root)/system/snapshots/*; do
			'
			    linux_entry "${OS}" "hardened" simple \
			    'btrfs_snapshot="$2" '"${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT} copytoram=n resume=PARTLABEL=system resume_offset=99999199999"
			    # TODO: ugly
	echo '
		done
	}
fi'
